{
    "componentChunkName": "component---src-templates-md-template-js",
    "path": "/readings/sed-and-awk-101-hacks-chapter-2",
    "result": {"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#syntax\">Syntax</a></li>\n<li><a href=\"#global-flag--g\">Global Flag (<code class=\"language-text\">-g</code>)</a></li>\n<li><a href=\"#number-flag-1-2-3-flag\">Number Flag (1, 2, 3.. flag)</a></li>\n<li><a href=\"#print-flag--p\">Print Flag (<code class=\"language-text\">-p</code>)</a></li>\n<li><a href=\"#write-flag--w\">Write Flag (<code class=\"language-text\">-w</code>)</a></li>\n<li><a href=\"#ignore-case-flag--i\">Ignore Case Flag (<code class=\"language-text\">-i</code>)</a></li>\n<li><a href=\"#execute-flag--e\">Execute Flag (<code class=\"language-text\">-e</code>)</a></li>\n<li><a href=\"#combine-sed-substitution-flags\">Combine Sed Substitution Flags</a></li>\n<li><a href=\"#sed-substitution-delimiter\">Sed Substitution Delimiter</a></li>\n<li><a href=\"#multiple-sed-commands-will-be-executed-as-a-chain\">Multiple Sed Commands will be executed as a CHAIN</a></li>\n<li><a href=\"#get-matched-pattern-\">Get Matched Pattern, <code class=\"language-text\">&amp;</code></a></li>\n<li><a href=\"#substitution-grouping--and-\">Substitution Grouping: <code class=\"language-text\">\\(</code> and <code class=\"language-text\">\\)</code></a></li>\n<li><a href=\"#gnu-sed-only-replacement-string-flags-l-l-u-u\">GNU Sed Only Replacement String Flags <code class=\"language-text\">\\l</code>. <code class=\"language-text\">\\L</code>, <code class=\"language-text\">\\u</code>, <code class=\"language-text\">\\U</code></a></li>\n</ul>\n</div>\n<h2 id=\"syntax\" style=\"position:relative;\"><a href=\"#syntax\" aria-label=\"syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Syntax</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'[address-range|pattern-range] s/original-string/replacement-string/[substitute-flags]'</span> inputfile</code></pre></div>\n<p>Replace all occurrences of Manager with Director:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s/Manager/Director/'</span> employee.txt</code></pre></div>\n<p>Replace Manager with Director only on lines that contain the keyword 'Sales':</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'/Sales/s/Manager/Director/'</span> employee.txt</code></pre></div>\n<h2 id=\"global-flag--g\" style=\"position:relative;\"><a href=\"#global-flag--g\" aria-label=\"global flag  g permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Flag (<code class=\"language-text\">-g</code>)</h2>\n<p>Without flag <code class=\"language-text\">-g</code>, only the 1st occurrence of the {original-string} on each line will be replaced.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/a/A/'</span> employee.txt\n<span class=\"token number\">101</span>, John Doe, CEO\n<span class=\"token number\">102</span>, J*A*son Smith, IT Manager\n<span class=\"token number\">103</span>, R*A*j Reddy, Sysadmin\n<span class=\"token number\">104</span>, An*A*nd Ram, Developer\n<span class=\"token number\">105</span>, J*A*ne Miller, Sales Manager</code></pre></div>\n<p>With <code class=\"language-text\">-g</code>, all occurrences of lower case a with upper case A:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/a/A/g'</span> employee.txt\n<span class=\"token number\">101</span>, John Doe, CEO\n<span class=\"token number\">102</span>, J*A*son Smith, IT M*A*n*A*ger\n<span class=\"token number\">103</span>, R*A*j Reddy, Sys*A*dmin\n<span class=\"token number\">104</span>, An*A*nd Ram, Developer\n<span class=\"token number\">105</span>, J*A*ne Miller, S*A*les M*A*n*A*ger</code></pre></div>\n<h2 id=\"number-flag-1-2-3-flag\" style=\"position:relative;\"><a href=\"#number-flag-1-2-3-flag\" aria-label=\"number flag 1 2 3 flag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number Flag (1, 2, 3.. flag)</h2>\n<blockquote>\n<p>Only the <strong>n-th</strong> instance of original-string will trigger the substitution.</p>\n</blockquote>\n<blockquote>\n<p>n can be anything <strong>from 1 to 512</strong></p>\n</blockquote>\n<p>Following command will only replace the 2nd of occurrence of 'a' to 'A'.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s/a/A/2'</span> employee.txt</code></pre></div>\n<h2 id=\"print-flag--p\" style=\"position:relative;\"><a href=\"#print-flag--p\" aria-label=\"print flag  p permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Print Flag (<code class=\"language-text\">-p</code>)</h2>\n<p>The sed substitute flag p stands for print. When the substitution is successful, it prints the changed line.</p>\n<p>Print only the line that was changed by the substitute command, <code class=\"language-text\">-n</code> flag to silent the \"read\" print.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> -n <span class=\"token string\">'s/John/Johnny/p'</span> employee.txt</code></pre></div>\n<p>Change the 2nd instance of “locate” to “find” and print the result:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> -n <span class=\"token string\">'s/locate/find/2p'</span> substitute-locate.txt\n<span class=\"token function\">locate</span> <span class=\"token builtin class-name\">command</span> is used to <span class=\"token function\">find</span> files\n<span class=\"token function\">locate</span> <span class=\"token builtin class-name\">command</span> uses database to <span class=\"token function\">find</span> files</code></pre></div>\n<h2 id=\"write-flag--w\" style=\"position:relative;\"><a href=\"#write-flag--w\" aria-label=\"write flag  w permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Write Flag (<code class=\"language-text\">-w</code>)</h2>\n<p>Instead of printing to standard output, <code class=\"language-text\">-w</code> will write to a file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s/locate/find/2w output.txt'</span> substitue-locate.txt</code></pre></div>\n<h2 id=\"ignore-case-flag--i\" style=\"position:relative;\"><a href=\"#ignore-case-flag--i\" aria-label=\"ignore case flag  i permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ignore Case Flag (<code class=\"language-text\">-i</code>)</h2>\n<p>With <code class=\"language-text\">-i</code> flag, pattern matching will ignore case.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s/john/Johnny/i'</span> employee.txt</code></pre></div>\n<h2 id=\"execute-flag--e\" style=\"position:relative;\"><a href=\"#execute-flag--e\" aria-label=\"execute flag  e permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Execute Flag (<code class=\"language-text\">-e</code>)</h2>\n<p><code class=\"language-text\">-e</code> flag stand for execute. Using the sed <code class=\"language-text\">-e</code> flag, you can execute whatever is available in the pattern space as a shell command, and the output will be returned to the pattern space.</p>\n<blockquote>\n<p>This is available only in the GNU sed.</p>\n</blockquote>\n<p>Conent in the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> files.txt\n/etc/passwd\n/etc/group</code></pre></div>\n<p><code class=\"language-text\">s/^/{text}/</code> will add <code class=\"language-text\">text</code> to the start of every line:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/^/ls -l /'</span> file.txt\n<span class=\"token function\">ls</span> -l /etc/passwd\n<span class=\"token function\">ls</span> -l /etc/group</code></pre></div>\n<p>Add the command and execute the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/^/ls -l /e'</span> files.txt\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">1547</span> Oct <span class=\"token number\">27</span> 08:11 /etc/passwd\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">651</span> Oct <span class=\"token number\">27</span> 08:11 /etc/group</code></pre></div>\n<h2 id=\"combine-sed-substitution-flags\" style=\"position:relative;\"><a href=\"#combine-sed-substitution-flags\" aria-label=\"combine sed substitution flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Combine Sed Substitution Flags</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> -n <span class=\"token string\">'s/Manager/Director/gipw output.txt'</span> employee.txt</code></pre></div>\n<h2 id=\"sed-substitution-delimiter\" style=\"position:relative;\"><a href=\"#sed-substitution-delimiter\" aria-label=\"sed substitution delimiter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sed Substitution Delimiter</h2>\n<p>If the match pattern contains <code class=\"language-text\">/</code>, we can use delimiter to differenciate the slash:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s|/usr/local/bin|/usr/bin|'</span> path.txt\n<span class=\"token function\">sed</span> <span class=\"token string\">'s^/usr/local/bin^/usr/bin^'</span> path.txt\n<span class=\"token function\">sed</span> <span class=\"token string\">'s@/usr/local/bin@/usr/bin@'</span> path.txt\n<span class=\"token function\">sed</span> <span class=\"token string\">'s!/usr/local/bin!/usr/bin!'</span> path.txt </code></pre></div>\n<h2 id=\"multiple-sed-commands-will-be-executed-as-a-chain\" style=\"position:relative;\"><a href=\"#multiple-sed-commands-will-be-executed-as-a-chain\" aria-label=\"multiple sed commands will be executed as a chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple Sed Commands will be executed as a CHAIN</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'{\ns/Developer/IT Manager/\ns/Manager/Director/\n}'</span> employee.txt\n<span class=\"token number\">101</span>,John Doe,CEO\n<span class=\"token number\">102</span>,Jason Smith,IT Director\n<span class=\"token number\">103</span>,Raj Reddy,Sysadmin\n<span class=\"token number\">104</span>,Anand Ram,IT Director\n<span class=\"token number\">105</span>,Jane Miller,Sales Director</code></pre></div>\n<h2 id=\"get-matched-pattern-\" style=\"position:relative;\"><a href=\"#get-matched-pattern-\" aria-label=\"get matched pattern  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Get Matched Pattern, <code class=\"language-text\">&amp;</code></h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/^[0-9][0-9][0-9]/[&amp;]/g'</span> employee.txt\n<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span>,John Doe,CEO\n<span class=\"token punctuation\">[</span><span class=\"token number\">102</span><span class=\"token punctuation\">]</span>,Jason Smith,IT Manager\n<span class=\"token punctuation\">[</span><span class=\"token number\">103</span><span class=\"token punctuation\">]</span>,Raj Reddy,Sysadmin\n<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span>,Anand Ram,Developer\n<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span>,Jane Miller,Sales Manager</code></pre></div>\n<h2 id=\"substitution-grouping--and-\" style=\"position:relative;\"><a href=\"#substitution-grouping--and-\" aria-label=\"substitution grouping  and  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Substitution Grouping: <code class=\"language-text\">\\(</code> and <code class=\"language-text\">\\)</code></h2>\n<p>In the following example:</p>\n<ul>\n<li>Regular expression <code class=\"language-text\">\\([^,]*\\)</code> matches the string up to the 1st comma.</li>\n<li><code class=\"language-text\">\\1</code> in the replacement-string replaces the first matched group.</li>\n<li><code class=\"language-text\">g</code> is the global substitute flag.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\([^,]*\\).*/\\1/g'</span> employee.txt\n<span class=\"token number\">101</span>\n<span class=\"token number\">102</span>\n<span class=\"token number\">103</span>\n<span class=\"token number\">104</span>\n<span class=\"token number\">105</span></code></pre></div>\n<p>This sed example displays only the first field from the /etc/passwd file, i.e. it displays only the username:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s/\\([^:]*\\).*/\\1/'</span> /etc/passwd</code></pre></div>\n<p>The following example encloses the 1st letter in every word inside (), if the 1st character is upper case.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The Geek Stuff\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\(\\b[A-Z]\\)/\\(\\1\\)/g'</span>\n<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>he <span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span>eek <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>tuff</code></pre></div>\n<blockquote>\n<p>Multiple pairs of <code class=\"language-text\">\\(</code> and <code class=\"language-text\">\\)</code> will match multiple groups. Use <code class=\"language-text\">\\1</code>, <code class=\"language-text\">\\2</code> etc to get those groups.</p>\n</blockquote>\n<h2 id=\"gnu-sed-only-replacement-string-flags-l-l-u-u\" style=\"position:relative;\"><a href=\"#gnu-sed-only-replacement-string-flags-l-l-u-u\" aria-label=\"gnu sed only replacement string flags l l u u permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GNU Sed Only Replacement String Flags <code class=\"language-text\">\\l</code>. <code class=\"language-text\">\\L</code>, <code class=\"language-text\">\\u</code>, <code class=\"language-text\">\\U</code></h2>\n<blockquote>\n<p>These flags are used in {replacement-string}</p>\n</blockquote>\n<p>When you specify <code class=\"language-text\">\\l</code> in the replacement-string part, it treats the character that immediately follows \\l as lower case. You already know the following simple example will change John to JOHNNY.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> <span class=\"token string\">'s/John/JOHNNY/'</span> employee.txt</code></pre></div>\n<p>The following example contains \\l before H in the replacement-string (i.e. JO\\lHNNY). This will change only the character h in JOHNNY to lower case.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> -n <span class=\"token string\">'s/John/JO\\lHNNY/p'</span> employee.txt\n<span class=\"token number\">101</span>,JOhNNY Doe,CEO </code></pre></div>\n<p>When you specify <code class=\"language-text\">\\L</code> in the replacement-string part, it treats the rest of the characters as lower case.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> -n <span class=\"token string\">'s/John/JO\\LHNNY/p'</span> employee.txt\n<span class=\"token number\">101</span>,JOhnny Doe,CEO </code></pre></div>\n<p><code class=\"language-text\">\\u</code> and <code class=\"language-text\">\\U</code> are for upper case.</p>\n<p><code class=\"language-text\">\\E</code> should be used conjunction with <code class=\"language-text\">\\L</code> and <code class=\"language-text\">\\U</code>, to end the replacements.</p>\n<blockquote>\n<p>These flags are useful because these can be put before grouping.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\([^,]*\\),\\([^,]*\\),\\(.*\\).*/\\U\\2\\E,\\1,\\L\\3/g'</span>\nemployee.txt\nJOHN DOE,101,ceo\nJASON SMITH,102,it manager\nRAJ REDDY,103,sysadmin\nANAND RAM,104,developer\nJANE MILLER,105,sales manager </code></pre></div>","frontmatter":{"date":"June 18, 2022","path":"/readings/sed-and-awk-101-hacks-chapter-2","tags":["readings","sed and awk 101 hacks","bash","sed"],"title":"Sed and Awk 101 Hacks: CP2 - Sed Substitue Command","description":"SED Substitue Command"}}},"pageContext":{"prev":{"frontmatter":{"path":"/readings/arduino-engineering-kit-chapter-1","tags":["readings","arduino engineering kit"],"password":null},"internal":{"content":"\n```toc\n```\n\n## In the kit\n![Arduino Board and Carrier](images/1594373725-aek-ch1-sc1-1-arduino-boards.jpeg)\n\n* **Arduino NANO 33 IOT**: is an Arduino board:\n    * Atmel ATSAMW25 SoC.\n    * Wifi connectivity\n    * Small\n    * IoT effective\n    * [$20.30](https://store-usa.arduino.cc/products/arduino-nano-33-iot)\n* **Arduino Nano Motor Carrier**: is an expansion board for Nano family\n    * control servos, DC moters, and stepper moters\n    * [$71.30](https://store-usa.arduino.cc/products/arduino-nano-motor-carrier?selectedStore=us)\n\n\n![DC and Motors](images/1594373732-aek-ch1-sc1-1-motors.jpeg)\n* **Micro Geared DC Motor W/Encoders**\n    * 12V DC Motor with Encoder\n    * 100:1 gearbox to increase the torque\n    * (About) [$12.50](https://www.digikey.com/en/products/detail/adafruit-industries-llc/4641/13162130?utm_adgroup=Motors%20-%20AC%2C%20DC&utm_source=google&utm_medium=cpc&utm_campaign=Shopping_Product_Motors%2C%20Solenoids%2C%20Driver%20Boards%2FModules_NEW&utm_term=&utm_content=Motors%20-%20AC%2C%20DC&gclid=Cj0KCQjwkruVBhCHARIsACVIiOyhAtk8nAssUEol4sOMIbSm6yCzDEYaO9_miPfZajrxb3CkgIxHxlAaAtS_EALw_wcB)\n* **DC Motor with Encoders**\n    * 12V DC motor with encoder\n    * no gearbox\n    * (About) ~$10\n* **Standard Micro Servo**\n    * Is a type of motor what can be controllerd from an Arduino board without a need of any other components.\n    * Standard servos have a rotation angle limited to 180 degrees with a precise control over the angle of rotation.\n\n---\n* **USB Web Cam**\n* **Mechanical Parts**\n\n## Softwares\n* Matlab\n* Plugin - MATLAB Support Package for Arduino Hardware\n* Plugin - Simulink Support Package for Arduino Hardware\n* Plugin - MATLAB Support Package for USB Webcams \n* Project Files - Arduino Engineering Kit Project Files"}},"next":{"frontmatter":{"path":"/readings/sed-and-awk-101-hacks-chapter-1","tags":["readings","sed and awk 101 hacks","bash","sed"],"password":null},"internal":{"content":"\n```toc\n```\n\n## Flow\n![sed flow](images/WeChatb331b396ed023d353af549c37da62749.png)\n\n## Sed Command Syntax\n```bash\nsed [options] {sed-commands} {input-file}\n```\n\n`-f` to combine multiple sed-commands ina file and call the sed script file\n```bash\nsed [options] -f {sed-commands-in-a-file} {input-file}\n```\n\n`-e` to execute multiple sed commands in command line.\n```bash\nsed [options] -e {sed-command-1} -e {sed-command-2} {input-file}\n```\n\nExecute multiple sed commands in command line using `{}`\n```bash\nsed [options] '{\nsed-command-1\nsed-command-2\n}' {input-file}\n```\n\n> Sed never modifies the original file. Use `>` to redirect output to a file at the end.\n\n## Print Pattern Space (`p` command)\n`p` command prints the current pattern space to stdout.\n```bash\nsed -n 'p' /etc/passwd\n```\n`-n` to silent output for the read line in each cycle. Without this, every line will be output twice.\n\nPrint only the 2nd line:\n```bash\nsed -n '2 p' employee.txt\n```\n\n`,`: Print line 1 through line 4:\n```bash\nsed -n '1,4 p' employee.txt\n```\n\n`$`: represents the last line:\n```bash\nsed -n '4,$ p' employee.txt\n```\n\n`+`: used in conjunction with the comma, to specify a number of lines instead of an absolute line number.\n```bash\nsed -n '1,+3' emplyee.txt\n```\n\n`~`: step\n```bash\nsed -n '1~2 p' emplyee.txt # => print line 1, 3, 5, 7...\n```\n\n## Pattern Matching\nPrint lines matching the pattern \"Jane\":\n```bash\nsed -n '/Jane/ p' employee.txt\n```\n\nPrint lines starting from the 1st match of \"Jason\" UNTIL the 4th line:\n```bash\n$ sed -n '/Jason/,4 p' employee.txt\n102,Jason Smith,IT Manager\n103,Raj Reddy,Sysadmin\n14,Anand Ram,Developer\n```\n> If there were no matches for \"Jason\" in the 1st 4 lines, this command would print the lines that match \"Jason\" after the 4th line.\n\nPrint lines starting from the line matching \"Raj\" until the line matching \"Jane\"\n```bash\nsed -n '/Raj/,/Jane/ p' employee.txt\n```\n\n## Delete Lines (`d` command)\n> Conceptional similar to `p` command, pattern matching then DON'T output the matching line(s)\n\nDelete all the empty lines from a file:\n```bash\nsed '/^$/ d' employee.txt\n```\n\nDelete all comment lines(assuming the comment starts with #)\n```bash\nsed '/^#/ d' employee.txt\n```\n\n## Write Pattern Spae to File (`w` command)\nWrite the content of employee.txt file to file output.txt (and display on screen, `-n` option can disable the screen printing).\n```bash\nsed 'w output.txt' employee.txt\n```\n\nWith pattern matching:\n```bash\nsed '1,4 w output.txt' employee.txt\n```\n\n> `>` can be a replacement of this `w` command\n"}}}},
    "staticQueryHashes": []}