{
    "componentChunkName": "component---src-templates-md-template-js",
    "path": "/blogs/gatsby-on-codespaces",
    "result": {"data":{"markdownRemark":{"html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#multiple-repositories-permission-setup\">Multiple Repositories Permission Setup</a></li>\n<li><a href=\"#error---failed-to-launch-the-browser-process\">ERROR - Failed to launch the browser process!</a></li>\n<li><a href=\"#vim-plugin-doesnt-work\">VIM Plugin Doesn't Work</a></li>\n</ul>\n</div>\n<h2 id=\"multiple-repositories-permission-setup\" style=\"position:relative;\"><a href=\"#multiple-repositories-permission-setup\" aria-label=\"multiple repositories permission setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple Repositories Permission Setup</h2>\n<p>My blog is structured with multiple repositories hosted on Github for \"<a href=\"https://www.zzzgin.com/private-blog/password-protected-blog-in-gatsby\">password-protected blogs</a>\". They are managed by the native feature from Git called <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\">Submodule</a>. The structure looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;public Github Repo> gatsby-project root\n  ┗ pages\n    ┣ &lt;Private Github Repo> Folder for private blogs as a submodule\n    ┣ Folder for blogs\n    ┗ ...</code></pre></div>\n<p>This structure helps when you want to have some private content within a public repo. But this does not work in codespaces by default because for security reasons, Codespaces only allow read/write permission on the selected package when you start the VM.</p>\n<p>The permission is managed in <code class=\"language-text\">.devcontainer</code>. It's a folder in the root directory to config Codespaces VM creation.</p>\n<p>My <code class=\"language-text\">.devcontainer/devcontainer.json</code> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Node.js\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"dockerfile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dockerfile\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"VARIANT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"16-bullseye\"</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token property\">\"customizations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"vscode\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string\">\"your-own-extension-ids\"</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token property\">\"codespaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"repositories\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// This is how to config permission </span>\n\t\t\t\t<span class=\"token comment\">// to access other repo</span>\n\t\t\t\t<span class=\"token property\">\"ZzzGin/private-blogs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> \n\t\t\t\t\t<span class=\"token property\">\"permissions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"write-all\"</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token property\">\"forwardPorts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"remoteUser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>NOTE: you need to commit the change and then create a new Codespace to apply this change. At least for me, it works ONLY after doing this.</p>\n</blockquote>\n<h2 id=\"error---failed-to-launch-the-browser-process\" style=\"position:relative;\"><a href=\"#error---failed-to-launch-the-browser-process\" aria-label=\"error   failed to launch the browser process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ERROR - Failed to launch the browser process!</h2>\n<p>By deafult, we are using some docker image provided by Github and it works with Gatsby build. But After applying the new <code class=\"language-text\">.devcontainer</code> file, the images \"16-bullseye\" does not include Chomium for some process in Gatsby build.</p>\n<p>To resolve this, we need to run following commands to install Chrome as prerequisites:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb <span class=\"token operator\">&amp;&amp;</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> --assume-yes <span class=\"token function\">install</span> ./google-chrome-stable_current_amd64.deb</code></pre></div>\n<h2 id=\"vim-plugin-doesnt-work\" style=\"position:relative;\"><a href=\"#vim-plugin-doesnt-work\" aria-label=\"vim plugin doesnt work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VIM Plugin Doesn't Work</h2>\n<p>Don't put Vim plugin in the extention list inside of <code class=\"language-text\">devcontainer.json</code>. Not sure why but after removing it out and install it manually, Vim will work properly.</p>","frontmatter":{"date":"June 27, 2022","path":"/blogs/gatsby-on-codespaces","tags":["blog","gatsby","codespace"],"title":"My Gatsby Workspace on Codespaces","description":"ON the homepage of Codespaces, Github markets it as a seamless switch of desktop VS Code. My blog is hosted on Github Pages with Gatsby as its framework. I use VS Code to write blogs locally. So naturally, after getting the preview opportunity to Codespaces, I try to migrate to it. Here is a note for some problems I met and how I fix them for the migration."}}},"pageContext":{"prev":null,"next":{"frontmatter":{"path":"/private-blog/password-protected-blog-in-gatsby","tags":["blog","private","gatsby"],"password":"secret"},"internal":{"content":"\n## The Idea\nPrivate blog is an interesting idea but, of course I know, it does not make too much sense as \"you already want to share it online, why you want to hide it?\". Right? But sometimes, it's a valid usecase. For exmaple, you only want to share one blog with group of people; or you are using your blog for some personal notes etc.\n\nWhen this usecase comes to static website framework, such as Gatsby, it becomes even more tricky because, for dynamic website, we can use cookies for user identify; we can store the protected content in some database without publishing it to client initially; we can call API to fetch protected content. But for static website, how can we generate the web page at server side without leaking the protected content is an interesting problem to solve.\n\nThis blog describes a solution for this usecase. I implemented this solution and use it on this blog. I also did a heap dump on the webpage to verify this solution. \n\n**Disclaimer**, within the boundary of my knowledge, this solution is safe. But **never store any sensitive content using this technic because it only increases the attack serface**.\n\n## Overview\nAs a static solution (without calling API to fetch protected content), a natual way to achieve this is sending encrypted content to client. By providing the cypher, client decrypts the encrypted to unlock the content.\n\n```\n---- backend ----\n<plain text> + {key}\n        | encrypt({key}, <plain text>)\n        V\n    [encrypted]\n        | sendToClient([encrypted])\n        V\n---- fontend ----\n        | user provides the {key}\n        V\n[encrypted] + {key}\n        | decrypt({key}, <plain text>)\n        V\n   <plain text>\n```\n\nBut, there are 2 problems under the context of Gatsby:\n1. My blog website is hosted on [Github Pages](https://pages.github.com/) and with free account, [the repo has to be public](https://stackoverflow.com/questions/28744980/github-pages-for-private-repository). I can either use the feature provided by Github called [Encrypted Secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets) (not sure if free account has this) or don't push the key and plain text to github, only push encrypted.\n2. Gatsby generates web pages at server side. The [data layer](https://www.gatsbyjs.com/docs/reference/graphql-data-layer/) generated by Gatsby is not reachable at run time, which is good because we can store the plain text in the data layer. But there are 2 places we can use to encrypt the plain text, which one is better?\n    1. `gatsby-node.js`\n    2. blog generation template\n3. And, how to render markdown for private blogs? For normal blogs, we are using the Gatsby plugin `gatsby-transformer-remark` for static markdown rendering. But for this kind of use case, we cannot render the markdown html at build time.\n\n## The 1st Problem: Public Repo on Github\nLet's take a closer look at the 2 potential solutions mentioned above:\n\n### 1. Encrypted Secrets\nThis is a sound way to **have private content in public repository** on Github. But there are some potential problems:\n1. [The secrets number is limited](https://docs.github.com/en/actions/security-guides/encrypted-secrets#limits-for-secrets). The limit is 100, if I want different passwords for each protected blog, it will become a problem when the number of blogs goes up. We can ignore this limit for now assuming that this limit will not be reached, but in future if it starts becoming a problem, it will be a big problem (as there are 100 blogs and 100 cyphers);\n2. It adds complexity to our Gatsby build time. I did not look into the solution too much (because I found a better solution), but we need to find a way to fetch the latest secrets from somewhere on Github (maybe an API, or some git commands) to make sure that our cypher and encrypted are in sync.\n3. We will be limited to Github, as this solution is supported by Github.\n\n### 2. Keep the Key and Plain Text on Local\n1. We have to take care of the key on our own. It will be a nightmare if we lost the key file;\n2. Same to the plain text files.\n3. We need to create some script or some solution to keep the plain text on local and the encrypted on Github in sync.\n\n### Better Solution: Git Submodule\nBasically, we want a solution to **have private content in public repository** right? Why don't we create a private repo in Github and use it as the storage only for private blogs?\n\nAnd luckily, Git itself (not Github) supports this use case by [Git Submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules)\n\n1. create a new repo on Github and set it as private;\n2. navigate to the place in your gatsby project where you want to put this submodule\n3. run `git submodule add https://github.com/{user-name}/{repo-name}.git` \n\nAnd we are good, we now have a submodule in our Gatsby project and it's a private Github repo.\n\nTo commit and push, simply navigate to the subfolder for submodule and commit and push. The main module will \"ignore\" the subfolder. But it will detect the new commit of the submodule and treat it as \"one change\". \n\nThere are some \"recursive\" way to commit and push without `cd`. Will update once I have more idea on this.\n\n## The 2nd Problem: Where to Encrypt\nSimple answer: encrypt the plain text in `gatsby-node.js`. \n\n> DON'T \"graphql query in\" or \"pass plain text into\" the markdown blog template\n\nWhy? Because based on observation, the template will be \"visible\" to client. The template React component in our use case will be dynamoically rendered at client side. By downloading a React debug Chrome extension, you can look at all \"states\" and \"props\" of the React component. We can see this behavior in the following section.\n\n## The 3nd Problem: How to Render\nThe idea of SSR in Gatsby is generating the compired HTML from Markdown and send the compired HTML to clients directly. In our usecase, we cannot do that because we will never send the plain text (Markdown) or HTML (compired from Markdown) to client.\n\nSo, what I do is adding dynamic markdown render library to my project and do it dynamically.\n\nThe library I am using: \n1. `react-markdown` for dynamic render\n2. `react-syntax-highlighter` for code snippet highlighting\n3. will add more, for example, for TOC, table support, mermaid support...\n\n## Pros\n1. Password and plain text are tracked in Git. And they are stored together, very easy to manage.\n2. Integrated to Markdown No speical treatment on Tags management.\n\n## Cons\n1. Multiple MD render engine in the project. Plugins, images need to be setup differently. There is one idea to fix this: don't encrypt the MD file and send it to client; but encrypt the rendered html and send the the encrypted to client.\n3. **[No longer valid, check [this](https://www.zzzgin.com/blogs/gatsby-on-codespaces)]** ~~Submodule is not supported on Github Codespaces. For some security reason, they only support single repo check-out in Codespace VM.~~\n\n## Verification\nReaders can verify \"if the plain text is leaked\" by these 2 tests:\n\n### React Debug Tool Test\nOpen up a new page of this blog and don't input anything as password. Also make sure that you have the [React Dev Debug Tool](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) installed as Chrome Extention.\n\nInspect the webpage and switch to \"Components\" tab. By selecting correct layer at left side, you can see all `props` and `pageContext` is visible to client:\n\n![image-1](https://raw.githubusercontent.com/ZzzGin/zzzgin.github.io/main/src/images/private-blog-images/WeChataef4a192c3d2293a143c327aacbcdd7f.png)\n\n### Heap Dump\nThis test does not require extension. Open up a new page of this blog and don't input anything as password. Inspect the webpage and switch to \"Memory\" tab. Take a snapshot of heap and `command + f` to search in the heap:\n1. search for `How to use password` which is text in description section (not encrypted):\n![image-2](https://raw.githubusercontent.com/ZzzGin/zzzgin.github.io/main/src/images/private-blog-images/WeChate3f4a4f9daf746cb93c757a296476757.png)\n2. search for `Private blog is an interesting` which is protected content:\n![image-3](https://raw.githubusercontent.com/ZzzGin/zzzgin.github.io/main/src/images/private-blog-images/WeChat163a4a16cfdba0a13984ad14eb19c38b.png)"}}}},
    "staticQueryHashes": []}